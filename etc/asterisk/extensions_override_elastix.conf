
[macro-hangupcall]
include => macro-hangupcall-custom

; Validar si el archivo de MixMon existe. Puede no existir si la llamada cuelga
; del lado origen antes que el destino conteste (Elastix bug #422)
exten => s,1,GotoIf($["${CDR(recordingfile)}" = ""]?endmixmoncheck)
; Si CDR(recordingfile) esta asignado y existe, NO LO TOCO
exten => s,n,Set(MIXMON_CALLFILENAME=${ASTSPOOLDIR}/monitor/${CDR(recordingfile)})
exten => s,n,System(test -e ${MIXMON_CALLFILENAME})
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "SUCCESS"]?finalcdr)
; Si CDR(recordingfile) es alcanzable con YEAR/MONTH/DAY, se modifica y va al final
exten => s,n,Set(MIXMON_CALLFILENAME=${ASTSPOOLDIR}/monitor/${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CDR(recordingfile)})
exten => s,n,System(test -e ${MIXMON_CALLFILENAME})
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "SUCCESS"]?mmtestsuccess1)
exten => s,n,Goto(mmtest1)
exten => s,n(mmtestsuccess1),Set(CDR(recordingfile)=${ASTSPOOLDIR}/monitor/${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CDR(recordingfile)})
exten => s,n,Goto(finalcdr)

; Este codigo es fragil. Actualizar si se averigua la manera de consultar AST_MONITOR_DIR
exten => s,n(mmtest1),Set(MIXMON_CALLFILENAME=${ASTSPOOLDIR}/monitor/${CALLFILENAME}.${MIXMON_FORMAT})
exten => s,n,GotoIf($["${MIXMON_DIR}" = ""]?defaultmixmondir)
exten => s,n,Set(MIXMON_CALLFILENAME=${MIXMON_DIR}${CALLFILENAME}.${MIXMON_FORMAT})
exten => s,n(defaultmixmondir),System(test -e ${MIXMON_CALLFILENAME})
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "SUCCESS"]?endmixmoncheck)
; Si archivo MixMon no existe, se anula CDR(recordingfile)
exten => s,n,Set(CDR(recordingfile)=)
exten => s,n(endmixmoncheck),Noop(End of MIXMON check)

; Validar si existe el archivo de grabacion de MeetMe. Puede que el archivo de
; grabacion sea distinto del especificado en el contexto, porque solo obedece
; la asignacion del primer conferencista que entra a la conferencia.
exten => s,n,GotoIf($["${MEETME_RECORDINGFILE}" = ""]?nomeetmemon)
exten => s,n,GotoIf($["${MEETME_ACTUAL_RECORDINGFILE}" = ""]?nomeetmemon)
; Revisar si existe ${MEETME_ACTUAL_RECORDINGFILE}.${MIXMON_FORMAT}
exten => s,n,Set(MEETME_REAL_TESTFILE=${MEETME_ACTUAL_RECORDINGFILE}.${MIXMON_FORMAT})
exten => s,n,Set(MEETME_ALIAS_TESTFILE=${MEETME_RECORDINGFILE}.${MIXMON_FORMAT})
exten => s,n,System(test -e ${MEETME_REAL_TESTFILE})
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "SUCCESS"]?meetmemonexists)
; Revisar si existe ${MEETME_ACTUAL_RECORDINGFILE}.wav
exten => s,n,Set(MEETME_REAL_TESTFILE=${MEETME_ACTUAL_RECORDINGFILE}.wav)
exten => s,n,Set(MEETME_ALIAS_TESTFILE=${MEETME_RECORDINGFILE}.wav)
exten => s,n,System(test -e ${MEETME_REAL_TESTFILE})
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "SUCCESS"]?meetmemonexists)
exten => s,n,Goto(nomeetmemon)
exten => s,n(meetmemonexists),Noop(MEETME recording is ${MEETME_REAL_TESTFILE})
; Revisar si MEETME_ACTUAL_RECORDINGFILE difiere de MEETME_RECORDINGFILE
exten => s,n,GotoIf($["${MEETME_RECORDINGFILE}" = "${MEETME_ACTUAL_RECORDINGFILE}"]?meetmeskiplink)
exten => s,n,Noop(Hardlinking ${MEETME_REAL_TESTFILE} to ${MEETME_ALIAS_TESTFILE})
exten => s,n,System(ln ${MEETME_REAL_TESTFILE} ${MEETME_ALIAS_TESTFILE})
exten => s,n(meetmeskiplink),Set(CDR(recordingfile)=${MEETME_ALIAS_TESTFILE})
exten => s,n(nomeetmemon),Noop(End of MEETME check)

; Validar si existe el archivo de grabacion bajo demanda para la extension
exten => s,n,GotoIf($["${TOUCH_MONITOR_OUTPUT}" = ""]?noautomon)
exten => s,n,GotoIf($["${TOUCH_MONITOR_FORMAT}" = ""]?noautomonformat)
exten => s,n,Set(CDR(recordingfile)=${TOUCH_MONITOR_OUTPUT}.${TOUCH_MONITOR_FORMAT})
exten => s,n,Goto(noautomon)
exten => s,n(noautomonformat),Set(CDR(recordingfile)=${TOUCH_MONITOR_OUTPUT}.wav)
exten => s,n(noautomon),Noop(TOUCH_MONITOR_OUTPUT=${TOUCH_MONITOR_OUTPUT})

; Validar si existe el archivo de grabacion de la cola
exten => s,n,GotoIf($["${MONITOR_FILENAME}" = ""]?noautomon2)
exten => s,n,System(test -e ${MONITOR_FILENAME}*)
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "APPERROR"]?errornoautomon)
exten => s,n,Set(CDR(recordingfile)=${MONITOR_FILENAME})
exten => s,n(errornoautomon),Noop(End of MONITOR QUEUE check)
exten => s,n(noautomon2),Noop(MONITOR_FILENAME=${MONITOR_FILENAME})

; Validar nombre de archivo de grabacion bajo demanda en FreePBX 2.11
exten => s,n,GotoIf($["${MIXMONITOR_FILENAME}" = ""]?noautomon3)
exten => s,n,System(test -e ${MIXMONITOR_FILENAME}*)
exten => s,n,Noop(SYSTEMSTATUS = ${SYSTEMSTATUS})
exten => s,n,GotoIf($["${SYSTEMSTATUS}" = "APPERROR"]?errornoautomon2)
exten => s,n,Set(CDR(recordingfile)=${MIXMONITOR_FILENAME})
exten => s,n(errornoautomon2),Noop(End of MIXMONITOR_FILENAME check)
exten => s,n(noautomon3),Noop(MIXMONITOR_FILENAME=${MIXMONITOR_FILENAME})

; Validar si existe el archivo de grabacion bajo demanda en FreePBX 2.11 sin ruta
exten => s,n,GotoIf($["${ONETOUCH_RECFILE}" = ""]?noautomon4)
exten => s,n,Set(CDR(recordingfile)=${ONETOUCH_RECFILE})
exten => s,n(noautomon4),Noop(ONETOUCH_RECFILE=${ONETOUCH_RECFILE})

exten => s,n(finalcdr),Noop(CDR recordingfile set to: ${CDR(recordingfile)})

exten => s,n(start),GotoIf($["${USE_CONFIRMATION}"="" | "${RINGGROUP_INDEX}"="" | "${CHANNEL}"!="${UNIQCHAN}"]?skiprg)
exten => s,n,Noop(Cleaning Up Confirmation Flag: RG/${RINGGROUP_INDEX}/${CHANNEL})
exten => s,n(delrgi),Noop(Deleting: RG/${RINGGROUP_INDEX}/${CHANNEL} ${DB_DELETE(RG/${RINGGROUP_INDEX}/${CHANNEL})})
exten => s,n(skiprg),GotoIf($["${BLKVM_BASE}"="" | "BLKVM/${BLKVM_BASE}/${CHANNEL}"!="${BLKVM_OVERRIDE}"]?skipblkvm)
exten => s,n,Noop(Cleaning Up Block VM Flag: ${BLKVM_OVERRIDE})
exten => s,n(delblkvm),Noop(Deleting: ${BLKVM_OVERRIDE} ${DB_DELETE(${BLKVM_OVERRIDE})})
exten => s,n(skipblkvm),GotoIf($["${FMGRP}"="" | "${FMUNIQUE}"="" | "${CHANNEL}"!="${FMUNIQUE}"]?theend)
exten => s,n(delfmrgp),Noop(Deleting: FM/DND/${FMGRP}/${CHANNEL} ${DB_DELETE(FM/DND/${FMGRP}/${CHANNEL})})
exten => s,n(theend),AGI(hangup.agi)
exten => s,n,Hangup

[macro-record-enable]
include => macro-record-enable-custom
exten => s,1,GotoIf($["${BLINDTRANSFER}" = ""]?check)
exten => s,n,ResetCDR(w)
exten => s,n,StopMixMonitor()
exten => s,n(check),ExecIf($["${ARG1}"=""]?MacroExit())
exten => s,n,GotoIf($["${ARG2}"="Group"]?Group:OUT)
exten => s,n(Group),Set(LOOPCNT=${FIELDQTY(ARG1,-)})
exten => s,n,Set(ITER=1)
exten => s,n(begin),GotoIf($["${CUT(DB(AMPUSER/${CUT(ARG1,-,${ITER})}/recording),=,3)}" != "Always"]?continue)
exten => s,n,Set(TEXTEN=${CUT(ARG1,-,${ITER})})
exten => s,n,Noop(Recording enable for ${TEXTEN})
exten => s,n,Set(CALLFILENAME=g${TEXTEN}-${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-${UNIQUEID})
exten => s,n,Goto(record)
exten => s,n(continue),Set(ITER=$[${ITER}+1])
exten => s,n,GotoIf($[${ITER}<=${LOOPCNT}]?begin)
exten => s,n(OUT),GotoIf($["${ARG2}"="IN"]?IN)
exten => s,n,ExecIf($["${CUT(DB(AMPUSER/${ARG1}/recording),\\\|,1):4}" != "Always"]?MacroExit())
exten => s,n,Noop(Recording enable for ${ARG1})
exten => s,n,Set(CALLFILENAME=OUT${ARG1}-${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-${UNIQUEID})
exten => s,n,Goto(record)
exten => s,n(IN),ExecIf($["${CUT(DB(AMPUSER/${ARG1}/recording),\\\|,2):3}" != "Always"]?MacroExit())
exten => s,n,Noop(Recording enable for ${ARG1})
exten => s,n,Set(CALLFILENAME=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-${UNIQUEID})
exten => s,n(record),MixMonitor(${MIXMON_DIR}${CALLFILENAME}.${MIXMON_FORMAT},,${MIXMON_POST})
exten => s,n,Set(CDR(recordingfile)=${CALLFILENAME}.${MIXMON_FORMAT})
exten => s,n,MacroExit()

; agregar el numero de agente en el nombre de la grabacion
[sub-record-check]
include => sub-record-check-custom
exten => s,1,Set(REC_POLICY_MODE_SAVE=${REC_POLICY_MODE})
exten => s,n,GotoIf($["${BLINDTRANSFER}" = ""]?check)
exten => s,n,ResetCDR()
exten => s,n,GotoIf($["${REC_STATUS}" != "RECORDING"]?check)
exten => s,n,Set(AUDIOHOOK_INHERIT(MixMonitor)=yes)
exten => s,n,MixMonitor(${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CALLFILENAME}.${MIXMON_FORMAT},a,${MIXMON_POST})
exten => s,n(check),Set(__MON_FMT=${IF($["${MIXMON_FORMAT}"="wav49"]?WAV:${MIXMON_FORMAT})})
exten => s,n,GotoIf($["${REC_STATUS}"!="RECORDING"]?next)
exten => s,n,Set(CDR(recordingfile)=${CALLFILENAME}.${MON_FMT})
exten => s,n,Return()
exten => s,n(next),ExecIf($[!${LEN(${ARG1})}]?Return())
exten => s,n,ExecIf($["${REC_POLICY_MODE}"="" & "${ARG3}"!=""]?Set(__REC_POLICY_MODE=${ARG3}))
exten => s,n,GotoIf($["${REC_STATUS}"!=""]?${ARG1},1)
exten => s,n,Set(__REC_STATUS=INITIALIZED)
exten => s,n,Set(NOW=${EPOCH})
exten => s,n,Set(__DAY=${STRFTIME(${NOW},,%d)})
exten => s,n,Set(__MONTH=${STRFTIME(${NOW},,%m)})
exten => s,n,Set(__YEAR=${STRFTIME(${NOW},,%Y)})
exten => s,n,Set(__TIMESTR=${YEAR}${MONTH}${DAY}-${STRFTIME(${NOW},,%H%M%S)})
exten => s,n,Set(__FROMEXTEN=${IF($[${LEN(${AMPUSER})}]?${AMPUSER}:${IF($[${LEN(${REALCALLERIDNUM})}]?${REALCALLERIDNUM}:unknown)})})

exten => s,n,GotoIf($[${LEN(${CDR(agente)})} > 0]?ccl_ligero)
exten => s,n,Set(__CALLFILENAME=${ARG1}-${ARG2}-${FROMEXTEN}-${TIMESTR}-${UNIQUEID})
exten => s,n,Goto(${ARG1},1)
exten => s,n(ccl_ligero),Set(__CALLFILENAME=${ARG1}-${ARG2}-${FROMEXTEN}-${TIMESTR}-${CDR(agente)}-${UNIQUEID})
exten => s,n,Goto(${ARG1},1)

exten => rg,1,GosubIf($["${REC_POLICY_MODE}"="always"]?record,1(${EXTEN},${REC_POLICY_MODE},${FROMEXTEN}))
exten => rg,n,Return()

exten => force,1,GosubIf($["${REC_POLICY_MODE}"="always"]?record,1(${EXTEN},${REC_POLICY_MODE},${FROMEXTEN}))
exten => force,n,Return()

exten => q,1,GosubIf($["${REC_POLICY_MODE}"="always"]?recq,1(${EXTEN},${ARG2},${FROMEXTEN}))
exten => q,n,Return()

exten => out,1,ExecIf($["${REC_POLICY_MODE}"=""]?Set(__REC_POLICY_MODE=${DB(AMPUSER/${FROMEXTEN}/recording/out/external)}))
exten => out,n,GosubIf($["${REC_POLICY_MODE}"="always"]?record,1(exten,${ARG2},${FROMEXTEN}))
exten => out,n,Return()

exten => exten,1,GotoIf($["${REC_POLICY_MODE}"!=""]?callee)
exten => exten,n,Set(__REC_POLICY_MODE=${IF($[${LEN(${FROM_DID})}]?${DB(AMPUSER/${ARG2}/recording/in/external)}:${DB(AMPUSER/${ARG2}/recording/in/internal)})})
exten => exten,n,GotoIf($["${REC_POLICY_MODE}"="dontcare"]?caller)
exten => exten,n,GotoIf($["${DB(AMPUSER/${FROMEXTEN}/recording/out/internal)}"="dontcare" | "${FROM_DID}"!=""]?callee)
exten => exten,n,ExecIf($[${LEN(${DB(AMPUSER/${FROMEXTEN}/recording/priority)})}]?Set(CALLER_PRI=${DB(AMPUSER/${FROMEXTEN}/recording/priority)}):Set(CALLER_PRI=0))
exten => exten,n,ExecIf($[${LEN(${DB(AMPUSER/${ARG2}/recording/priority)})}]?Set(CALLEE_PRI=${DB(AMPUSER/${ARG2}/recording/priority)}):Set(CALLEE_PRI=0))
exten => exten,n,GotoIf($["${CALLER_PRI}"="${CALLEE_PRI}"]?${REC_POLICY}:${IF($[${CALLER_PRI}>${CALLEE_PRI}]?caller:callee)})
exten => exten,n(callee),GosubIf($["${REC_POLICY_MODE}"="always"]?record,1(${EXTEN},${ARG2},${FROMEXTEN}))
exten => exten,n,Return()
exten => exten,n(caller),Set(__REC_POLICY_MODE=${DB(AMPUSER/${FROMEXTEN}/recording/out/internal)})
exten => exten,n,GosubIf($["${REC_POLICY_MODE}"="always"]?record,1(${EXTEN},${ARG2},${FROMEXTEN}))
exten => exten,n,Return()

exten => conf,1,Gosub(recconf,1(${EXTEN},${ARG2},${ARG2}))
exten => conf,n,Return()

exten => page,1,GosubIf($["${REC_POLICY_MODE}"="always"]?recconf,1(${EXTEN},${ARG2},${FROMEXTEN}))
exten => page,n,Return()

exten => record,1,Set(AUDIOHOOK_INHERIT(MixMonitor)=yes)
exten => record,n,MixMonitor(${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CALLFILENAME}.${MIXMON_FORMAT},,${MIXMON_POST})
exten => record,n,Set(__REC_STATUS=RECORDING)
exten => record,n,Set(CDR(recordingfile)=${CALLFILENAME}.${MON_FMT})
exten => record,n,Return()

exten => recq,1,Set(AUDIOHOOK_INHERIT(MixMonitor)=yes)
exten => recq,n,Set(MONITOR_FILENAME=${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CALLFILENAME})
exten => recq,n,MixMonitor(${MONITOR_FILENAME}.${MIXMON_FORMAT},${MONITOR_OPTIONS},${MIXMON_POST})
exten => recq,n,Set(__REC_STATUS=RECORDING)
exten => recq,n,Set(CDR(recordingfile)=${CALLFILENAME}.${MON_FMT})
exten => recq,n,Return()

exten => recconf,1,Set(__CALLFILENAME=${IF($[${MEETME_INFO(parties,${ARG2})}]?${DB(RECCONF/${ARG2})}:${ARG1}-${ARG2}-${ARG3}-${TIMESTR}-${UNIQUEID})})
exten => recconf,n,ExecIf($[!${MEETME_INFO(parties,${ARG2})}]?Set(DB(RECCONF/${ARG2})=${CALLFILENAME}))
exten => recconf,n,Set(MEETME_RECORDINGFILE=${IF($[${LEN(${MIXMON_DIR})}]?${MIXMON_DIR}:${ASTSPOOLDIR}/monitor/)}${YEAR}/${MONTH}/${DAY}/${CALLFILENAME})
exten => recconf,n,Set(MEETME_RECORDINGFORMAT=${MIXMON_FORMAT})
exten => recconf,n,ExecIf($["${REC_POLICY_MODE}"!="always"]?Return())
exten => recconf,n,Set(__REC_STATUS=RECORDING)
exten => recconf,n,Set(CDR(recordingfile)=${CALLFILENAME}.${MON_FMT})
exten => recconf,n,Return()
